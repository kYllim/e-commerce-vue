services: 
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
    env_file:
      - .env.development
  product-service:
    build:
      context: ./services/product-service
      dockerfile: Dockerfile.dev
    container_name: product-service
    ports:
      - '4001:3000'
    env_file:
      - .env.development
    depends_on:
      - mongodb
    restart: unless-stopped  
    networks:
      - backend
    volumes:
      - ./services/product-service:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile.dev
    container_name: auth-service
    env_file:
      - .env.development
    ports:
      - "3001:3001"
    depends_on:
      - mongodb
    restart: unless-stopped
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/auth/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
  order-service:
    build:
      context: ./services/order-service
      dockerfile: Dockerfile.dev
    container_name: order-service
    ports:
      - '3002:3002'
    env_file:
      - .env.development
    depends_on:
      - mongodb
    restart: unless-stopped  
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
  mongodb:
    image: mongo
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - backend
volumes:
  mongo-data:
networks:
  backend:
    driver: bridge
